// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JiraCloneBackend.Migrations
{
    [DbContext(typeof(JiraCloneContext))]
    [Migration("20241005204015_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Boards", b =>
                {
                    b.Property<int>("Bid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Bid"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Uid")
                        .HasColumnType("integer");

                    b.HasKey("Bid");

                    b.HasIndex("Uid");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("Card_Issues", b =>
                {
                    b.Property<int>("Cid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Cid"));

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<int?>("LaneLid")
                        .HasColumnType("integer");

                    b.Property<int>("Lid")
                        .HasColumnType("integer");

                    b.Property<int>("Pid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Cid");

                    b.HasIndex("LaneLid");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Lane_Columns", b =>
                {
                    b.Property<int>("Lid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Lid"));

                    b.Property<int>("Bid")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Lid");

                    b.HasIndex("Bid");

                    b.ToTable("Lanes");
                });

            modelBuilder.Entity("Users", b =>
                {
                    b.Property<int>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Uid"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Uid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Boards", b =>
                {
                    b.HasOne("Users", "Owner")
                        .WithMany("SharedBoards")
                        .HasForeignKey("Uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Card_Issues", b =>
                {
                    b.HasOne("Lane_Columns", "Lane")
                        .WithMany("Cards")
                        .HasForeignKey("LaneLid");

                    b.Navigation("Lane");
                });

            modelBuilder.Entity("Lane_Columns", b =>
                {
                    b.HasOne("Boards", "Board")
                        .WithMany("Lanes")
                        .HasForeignKey("Bid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("Boards", b =>
                {
                    b.Navigation("Lanes");
                });

            modelBuilder.Entity("Lane_Columns", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Users", b =>
                {
                    b.Navigation("SharedBoards");
                });
#pragma warning restore 612, 618
        }
    }
}
